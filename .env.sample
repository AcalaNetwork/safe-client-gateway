# Safe Config Service URL
#CONFIG_SERVICE_URI=https://safe-config.staging.gnosisdev.com
CONFIG_SERVICE_URI=https://safe-config.gnosis.io

# The port exposed to the host by the nginx image.
NGINX_HOST_PORT=8080

# A directory where the result of executing envsubst is output (default: /etc/nginx/conf.d)
# Used by the nginx docker image in the templating system in order to use the environment variables set
NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/

# Feature Flags
FEATURE_FLAG_NESTED_DECODING=true
FEATURE_FLAG_BALANCES_RATE_IMPLEMENTATION=false

# The secret_key parameter configures a cryptographic key to use when encrypting application values.
# When compiled in debug mode, a fresh key is generated automatically.
# In release mode, Rocket requires you to set a secret key if the secrets feature is enabled.
# Failure to do so results in a hard error at launch time.
# The value of the parameter may either be a 256-bit base64 or hex string or a slice of 32 bytes.
# See https://rocket.rs/v0.5-rc/guide/configuration/#secret-key
#ROCKET_SECRET_KEY=Qt6DPFUU8qO4BKTCQnKAgt9FBBJxIWAYUGyHuruVfpE=

# Max level to log
ROCKET_LOG_LEVEL=normal

# The port number the application will listen on
ROCKET_PORT=8000

# The IP address or host the application will listen on
#ROCKET_ADDRESS=localhost
ROCKET_ADDRESS=0.0.0.0

# Scheme used for the service requests
#SCHEME=http
SCHEME=https

# Webhook token used to invalidate cached data
# See routes::hooks::routes for more information
#WEBHOOK_TOKEN=some_random_token

# Token to be used to call authenticated endpoints on the Safe Transaction Service
#TRANSACTION_SERVICE_AUTH_TOKEN=some_other_random_token

# Log levels are controlled on a per-module basis, and by default all logging is disabled except for the error level.
# The value of this environment variable is a comma-separated list of logging directives.
# See https://docs.rs/env_logger/latest/env_logger/#enabling-logging
RUST_LOG=safe_client_gateway=error,safe_client_gateway::monitoring=info

# TODO
LOG_ALL_ERROR_RESPONSES=false
# You can select which proportion of the time logs are emited with LOG_THRESHOLD values range [0.0, 1.0]
# Each time we log, we will generate a random (from a uniform distribution) number that we will test against LOG_THRESHOLD
# LOG_THRESHOLD=0.1

# The Service by default uses the VPC url which is returned by the Safe Config Service (true)
# If set to false, the public one is used
VPC_TRANSACTION_SERVICE_URI=true

# The number of concurrent requests made to the Safe Transaction Service
# in order to retrieve the USD exchange rate for a specific token
CONCURRENT_BALANCE_TOKEN_REQUESTS=5

# Time outs for caches (all have defaults in the code)
# The unit of these values is "milliseconds"
#SAFE_INFO_CACHE_DURATION=1000
#ADDRESS_INFO_CACHE_DURATION=1000
#TOKEN_INFO_CACHE_DURATION=1000
#CHAIN_INFO_CACHE_DURATION=1000
#CHAIN_INFO_RESPONSE_CACHE_DURATION=1000
#EXCHANGE_API_CACHE_DURATION=1000
#REQUEST_CACHE_DURATION=1000
#ABOUT_CACHE_DURATION=1000
#BALANCES_REQUEST_CACHE_DURATION=1000
#SAFE_APP_MANIFEST_CACHE_DURATION=1000
#REQS_ERROR_CACHE_DURATION=1000
#OWNERS_FOR_SAFES_CACHE_DURATION=1000
#INDEFINITE_TIMEOUT=1000 # long cache duration of your choice
#SHORT_ERROR_DURATION=1000
#LONG_ERROR_DURATION=1000
#SAFE_APPS_CACHE_DURATION=1000
#TX_QUEUED_CACHE_DURATION=1000

# Http request time outs
# The unit of these values is "milliseconds"
#INTERNAL_CLIENT_CONNECT_TIMEOUT=10000
#SAFE_APP_INFO_REQUEST_TIMEOUT=10000
#CHAIN_INFO_REQUEST_TIMEOUT=15000

# Redis
#REDIS_HOST=localhost
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_URI=redis://${REDIS_HOST}:${REDIS_PORT}
# REDIS_SCAN_COUNT=300

# Exchange rate API: https://exchangeratesapi.io/
EXCHANGE_API_BASE_URI=http://api.exchangeratesapi.io/latest

# The Exchange Rate API key to be used
#EXCHANGE_API_KEY=your_exchange_rate_api_token
